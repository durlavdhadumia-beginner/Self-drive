from pathlib import Path

path = Path("app.py")
text = path.read_text()
marker = "@app.route(\"/notifications\", methods=[\"GET\", \"POST\"])\n@login_required\ndef notifications() -> str:\n"
if marker not in text:
    raise SystemExit("notifications marker not found")
admin_routes = """@app.route(\"/admin\")\n@login_required\n@admin_required\ndef admin_dashboard() -> str:\n    db = get_db()\n    metrics = {\n        \"users\": db.execute(\"SELECT COUNT(*) FROM users\").fetchone()[0],\n        \"owners\": db.execute(\"SELECT COUNT(*) FROM users WHERE role IN ('owner', 'both')\").fetchone()[0],\n        \"renters\": db.execute(\"SELECT COUNT(*) FROM users WHERE role IN ('renter', 'both')\").fetchone()[0],\n        \"cars\": db.execute(\"SELECT COUNT(*) FROM cars\").fetchone()[0],\n        \"active_rentals\": db.execute(\"SELECT COUNT(*) FROM rentals WHERE status = 'active'\").fetchone()[0],\n        \"pending_requests\": db.execute(\"SELECT COUNT(*) FROM rentals WHERE status = 'booked' AND owner_response = 'pending'\").fetchone()[0],\n        \"open_complaints\": db.execute(\"SELECT COUNT(*) FROM complaints WHERE status = 'open'\").fetchone()[0],\n    }\n    pending_payments = db.execute(\n        \"\"\"\n        SELECT rentals.id, rentals.total_amount, rentals.payment_due_at, renters.username AS renter_username, cars.name AS car_name\n        FROM rentals\n        JOIN users AS renters ON renters.id = rentals.renter_id\n        JOIN cars ON cars.id = rentals.car_id\n        WHERE rentals.payment_status = 'awaiting_payment'\n        ORDER BY rentals.payment_due_at\n        \"\"\"\n    ).fetchall()\n    open_complaints = db.execute(\n        \"\"\"\n        SELECT complaints.*, submit.username AS submitter, target.username AS target_username, cars.name AS car_name\n        FROM complaints\n        JOIN users AS submit ON submit.id = complaints.submitted_by\n        JOIN users AS target ON target.id = complaints.target_user_id\n        LEFT JOIN rentals ON rentals.id = complaints.rental_id\n        LEFT JOIN cars ON cars.id = rentals.car_id\n        WHERE complaints.status = 'open'\n        ORDER BY complaints.created_at DESC\n        \"\"\"\n    ).fetchall()\n    recent_rentals = db.execute(\n        \"\"\"\n        SELECT rentals.id, rentals.status, rentals.start_time, rentals.end_time, rentals.payment_status,\n               renters.username AS renter_username, owners.username AS owner_username, cars.name AS car_name\n        FROM rentals\n        JOIN users AS renters ON renters.id = rentals.renter_id\n        JOIN cars ON cars.id = rentals.car_id\n        JOIN users AS owners ON owners.id = cars.owner_id\n        ORDER BY rentals.start_time DESC\n        LIMIT 8\n        \"\"\"\n    ).fetchall()\n    recent_users = db.execute(\n        \"SELECT id, username, role, is_admin FROM users ORDER BY id DESC LIMIT 8\"\n    ).fetchall()\n    return render_template(\"admin_dashboard.html\", metrics=metrics, pending_payments=pending_payments, open_complaints=open_complaints, recent_rentals=recent_rentals, recent_users=recent_users)\n\n\n@app.route(\"/admin/complaints/<int:complaint_id>/resolve\", methods=[\"POST\"])\n@login_required\n@admin_required\ndef resolve_complaint(complaint_id: int) -> str:\n    db = get_db()\n    complaint = db.execute(\"SELECT submitted_by FROM complaints WHERE id = ?\", (complaint_id,)).fetchone()\n    if complaint is None:\n        abort(404)\n    resolution = request.form.get(\"resolution\", \"\").strip()\n    now_iso = datetime.utcnow().isoformat()\n    db.execute(\n        \"UPDATE complaints SET status = 'resolved', resolved_at = ?, resolution = ? WHERE id = ?\",\n        (now_iso, resolution, complaint_id),\n    )\n    db.commit()\n    create_notification(complaint[\"submitted_by\"], \"Your complaint has been resolved by the admin team.\", url_for(\"rentals\"))\n    return redirect(url_for(\"admin_dashboard\"))\n\n\n"""
text = text.replace(marker, admin_routes + marker)
path.write_text(text)
